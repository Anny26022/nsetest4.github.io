import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { useEquityDetails } from '@/lib/api';
import { Badge } from './ui/badge';
import { Separator } from './ui/separator';
import { HoverCard, HoverCardContent, HoverCardTrigger } from './ui/hover-card';
import { Skeleton } from './ui/skeleton';
import {
  AlertTriangle,
  ArrowDownIcon,
  ArrowUpIcon,
  BarChart3,
  BarChart4,
  Building2,
  Calendar,
  CircleDollarSign,
  Gauge,
  Info,
  Layers,
  Percent,
  TrendingUp
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { PriceTicker } from './price-ticker';
import TradingViewChart from './trading-view-chart';

export function StockDetails({ symbol }: { symbol: string }) {
  const { data: details, error, isLoading } = useEquityDetails(symbol);
  const hasValidData = !isLoading && !error && details;

  // Helper functions for data formatting
  const formatIndianCurrency = (value?: number) => {
    if (!value) return 'N/A';
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 2
    }).format(value);
  };

  const formatLargeNumber = (value?: number) => {
    if (!value) return 'N/A';
    if (value >= 10000000) return `${(value / 10000000).toFixed(2)}Cr`;
    if (value >= 100000) return `${(value / 100000).toFixed(2)}L`;
    return value.toLocaleString('en-IN');
  };

  const formatTradeValue = (value?: number) => {
    if (!value) return 'N/A';
    if (value >= 10000000) return `₹${(value / 10000000).toFixed(2)}Cr`;
    if (value >= 100000) return `₹${(value / 100000).toFixed(2)}L`;
    return formatIndianCurrency(value);
  };

  const formatMarketCap = (value?: number) => {
    if (!value) return 'N/A';
    if (value >= 10000000) return `₹${(value / 10000000).toFixed(2)}Cr`;
    return formatIndianCurrency(value);
  };

  const formatPERatio = (value?: number) => {
    if (!value) return 'N/A';
    return value.toFixed(2);
  };

  const formatApiDate = (dateStr?: string) => {
    if (!dateStr) return '';
    return new Date(dateStr).toLocaleDateString('en-IN', { 
      day: '2-digit',
      month: 'short'
    });
  };

  // Data getters with null checks
  const getChange = () => details?.priceInfo?.change || 0;
  const getPChange = () => details?.priceInfo?.pChange || 0;
  const getIntradayHigh = () => details?.priceInfo?.intraDayHighLow?.high || 0;
  const getIntradayLow = () => details?.priceInfo?.intraDayHighLow?.low || 0;
  const get52WeekHigh = () => details?.priceInfo?.weekHighLow?.max || 0;
  const get52WeekLow = () => details?.priceInfo?.weekHighLow?.min || 0;
  const getMarketCap = () => details?.securityInfo?.marketCap || 0;
  const getPERatio = () => details?.securityInfo?.pdSymbolPe || 0;
  const getSector = () => details?.metadata?.sector;
  const getTotalTradedQuantity = () => details?.priceInfo?.totalTradedVolume || 0;
  const getTotalTradedValue = () => details?.priceInfo?.totalTradedValue || 0;
  const getVWAP = () => details?.priceInfo?.vwap;

  const getPriceBand = () => {
    if (!details?.priceInfo?.pPriceBand) return 'N/A';
    return details.priceInfo.pPriceBand;
  };

  // Calculate positions for range indicators
  const calculateTodayRangePosition = () => {
    const high = getIntradayHigh();
    const low = getIntradayLow();
    const current = details?.priceInfo?.lastPrice || 0;

    if (high <= low || current < low || current > high) return 0;
    return ((current - low) / (high - low)) * 100;
  };

  const calculate52WeekPosition = () => {
    const high = get52WeekHigh();
    const low = get52WeekLow();
    const current = details?.priceInfo?.lastPrice || 0;

    if (high <= low || current < low || current > high) return 0;
    return ((current - low) / (high - low)) * 100;
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl">
                {isLoading ? <Skeleton className="h-8 w-[150px]" /> : details?.info?.symbol}
              </CardTitle>
              <CardDescription>
                {isLoading ? <Skeleton className="h-4 w-[250px] mt-1" /> : details?.info?.companyName}
              </CardDescription>
            </div>
            {!isLoading && hasValidData && (
              <Badge className={getChange() >= 0 ? 'bg-green-500' : 'bg-red-500'}>
                <div className="flex items-center">
                  {getChange() >= 0 ? (
                    <ArrowUpIcon className="h-4 w-4 mr-1" />
                  ) : (
                    <ArrowDownIcon className="h-4 w-4 mr-1" />
                  )}
                  {getPChange().toFixed(2)}%
                </div>
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-10 w-full" />
              <div className="grid grid-cols-2 gap-4">
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-20 w-full" />
              </div>
            </div>
          ) : error ? (
            <div className="text-center text-red-500">Failed to load stock details</div>
          ) : hasValidData ? (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <div className="text-3xl font-bold">
                  <PriceTicker
                    price={details.priceInfo.lastPrice}
                    formatFn={formatIndianCurrency}
                  />
                </div>
                <div className={getChange() >= 0 ? 'text-green-500' : 'text-red-500'}>
                  {getChange() >= 0 ? '+' : ''}
                  {getChange().toFixed(2)} ({getPChange().toFixed(2)}%)
                </div>
              </div>

              {/* Key Metrics */}
              <div className="bg-secondary/50 p-4 rounded-lg">
                <div className="flex items-center mb-3">
                  <BarChart4 className="h-4 w-4 mr-2" />
                  <span className="text-sm font-medium">Key Metrics</span>
                </div>
                <div className="grid grid-cols-3 gap-3">
                  <div>
                    <div className="text-xs text-muted-foreground flex items-center">
                      <CircleDollarSign className="h-3 w-3 mr-1" />
                      Market Cap
                    </div>
                    <div className="text-sm font-medium mt-1">
                      {formatMarketCap(getMarketCap())}
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground flex items-center">
                      <Percent className="h-3 w-3 mr-1" />
                      P/E Ratio
                    </div>
                    <div className="text-sm font-medium mt-1">
                      {formatPERatio(getPERatio())}
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground flex items-center">
                      <Building2 className="h-3 w-3 mr-1" />
                      Sector
                    </div>
                    <div className="text-sm font-medium mt-1 truncate">
                      {getSector() || 'N/A'}
                    </div>
                  </div>
                </div>
              </div>

              {/* Trading Ranges */}
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-secondary/50 p-3 rounded-lg">
                  <div className="text-sm text-muted-foreground flex items-center">
                    <Layers className="h-4 w-4 mr-1" />
                    Today's Range
                  </div>
                  <div className="flex justify-between mt-1">
                    <div>{formatIndianCurrency(getIntradayLow())}</div>
                    <div>{formatIndianCurrency(getIntradayHigh())}</div>
                  </div>
                  <div className="w-full bg-secondary h-1 mt-2 rounded-full overflow-hidden">
                    {getIntradayHigh() > getIntradayLow() && (
                      <div
                        className="bg-primary h-full"
                        style={{ width: `${calculateTodayRangePosition()}%` }}
                      ></div>
                    )}
                  </div>
                </div>

                <div className="bg-secondary/50 p-3 rounded-lg">
                  <div className="text-sm text-muted-foreground flex items-center">
                    <TrendingUp className="h-4 w-4 mr-1" />
                    Previous Close
                  </div>
                  <div className="mt-1">{formatIndianCurrency(details.priceInfo.previousClose)}</div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {(details.priceInfo.previousClose || 0) < (details.priceInfo.lastPrice || 0) ? 'Up' : 'Down'} from yesterday
                  </div>
                </div>
              </div>

              {/* Volume Info */}
              <div className="bg-secondary/50 p-4 rounded-lg">
                <div className="flex items-center mb-2">
                  <Info className="h-4 w-4 mr-2" />
                  <span className="text-sm font-medium">Volume Information</span>
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <div className="text-xs text-muted-foreground">Trading Volume</div>
                    <div className="text-lg font-medium">
                      {formatLargeNumber(getTotalTradedQuantity())}
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground">Traded Value</div>
                    <div className="text-lg font-medium">
                      {formatTradeValue(getTotalTradedValue())}
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-muted-foreground">VWAP</div>
                    <div className="text-lg font-medium">
                      {getVWAP() !== undefined ? formatIndianCurrency(getVWAP()) : 'N/A'}
                    </div>
                  </div>
                </div>
              </div>

              {/* 52 Week Range */}
              <div className="bg-secondary/50 p-4 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <div className="text-sm font-medium flex items-center">
                    <BarChart3 className="h-4 w-4 mr-1" />
                    52 Week Range
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {formatIndianCurrency(get52WeekLow())} - {formatIndianCurrency(get52WeekHigh())}
                  </div>
                </div>
                <div className="w-full bg-secondary h-2 rounded-full overflow-hidden">
                  <div
                    className={cn(
                      "h-full",
                      getChange() >= 0 ? "bg-green-500" : "bg-red-500"
                    )}
                    style={{ width: `${calculate52WeekPosition()}%` }}
                  ></div>
                </div>
                <div className="flex justify-between mt-1 text-xs text-muted-foreground">
                  <div>52W Low ({formatApiDate(details.priceInfo.weekHighLow?.minDate)})</div>
                  <div>Current: {formatIndianCurrency(details.priceInfo.lastPrice)}</div>
                  <div>52W High ({formatApiDate(details.priceInfo.weekHighLow?.maxDate)})</div>
                </div>
              </div>

              {/* Industry Information */}
              {details.info.industry && (
                <div className="p-4 border border-border rounded-lg">
                  <div className="flex items-center mb-2">
                    <Gauge className="h-4 w-4 mr-2" />
                    <span className="text-sm font-medium">Industry: {details.info.industry}</span>
                  </div>
                  <Separator className="my-2" />
                  <div className="text-xs text-muted-foreground">
                    Industry classification provided by National Stock Exchange of India
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-4 text-muted-foreground">Could not load stock details. Please try again.</div>
          )}
        </CardContent>
      </Card>

      {/* TradingView Chart */}
      <Card className="p-4">
        <div className="h-[600px]">
          <TradingViewChart 
            symbol={symbol} 
            height={550}
            theme="light" 
          />
        </div>
      </Card>
    </div>
  );
}
